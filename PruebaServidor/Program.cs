using System;
using com.mazc.Sistema;


namespace PruebaServidor {


    class Program {


        static byte [] clave_privada = new byte [] {
                0x30, 0x82, 0x04, 0xA4, 0x02, 0x01, 0x00, 0x02, 0x82, 0x01,
                0x01, 0x00, 0xDB, 0xCF, 0x1E, 0x8D, 0xCB, 0xDE, 0x16, 0xE7,
                0xFC, 0xD4, 0xF5, 0x18, 0xBE, 0xC0, 0xB5, 0x75, 0xA2, 0xDF,
                0x0C, 0xFC, 0x30, 0x86, 0x7B, 0x28, 0x6D, 0xAA, 0x99, 0x1D,
                0x37, 0xF7, 0x2C, 0x75, 0x6C, 0xA7, 0x23, 0xAD, 0x70, 0x6F,
                0x1C, 0x59, 0x03, 0xDD, 0x80, 0x3A, 0xF7, 0x3C, 0xFD, 0x51,
                0xC8, 0x4A, 0x8E, 0x41, 0x7A, 0xAF, 0xC0, 0x60, 0xA6, 0xD4,
                0x53, 0x50, 0x86, 0x3F, 0x83, 0xE1, 0xFA, 0xA2, 0x4C, 0xC8,
                0x21, 0x65, 0x7A, 0xB3, 0xAE, 0x03, 0xBF, 0x83, 0x8E, 0xCA,
                0x6C, 0xF1, 0x71, 0x8B, 0x72, 0x9E, 0xC7, 0x82, 0x2F, 0xD8,
                0x00, 0xDF, 0xDB, 0x5C, 0xFE, 0x62, 0xCF, 0xBA, 0x5F, 0xA4,
                0x87, 0x3E, 0x0D, 0xCE, 0x14, 0xFE, 0xEC, 0xB1, 0xB8, 0x8F,
                0x98, 0x6B, 0xB0, 0xBC, 0x18, 0x3C, 0xE2, 0x98, 0x7D, 0xC4,
                0x73, 0x1C, 0x79, 0x52, 0xAE, 0x14, 0x4F, 0x15, 0x1F, 0x53,
                0xAB, 0xE4, 0xEC, 0x65, 0x4D, 0x0F, 0x2C, 0xB3, 0x8C, 0x12,
                0x5B, 0x3E, 0x08, 0xCF, 0x28, 0x0A, 0x62, 0x17, 0xF9, 0x2A,
                0xED, 0xD5, 0xFF, 0xFE, 0x7B, 0xD1, 0x52, 0xAB, 0xA3, 0xD2,
                0xD9, 0xCC, 0x42, 0x99, 0x26, 0x52, 0x6C, 0xA6, 0xDA, 0x47,
                0xF8, 0xF0, 0x8A, 0xA1, 0xCD, 0x7A, 0x98, 0x20, 0xEA, 0xE1,
                0x92, 0x56, 0x95, 0xD2, 0xA1, 0x9E, 0xC8, 0xD1, 0x8C, 0xCD,
                0x51, 0x47, 0x78, 0x7B, 0x0F, 0x8C, 0x7A, 0x8B, 0xC6, 0x8A,
                0xD2, 0xF3, 0x1B, 0x5F, 0xE0, 0x35, 0x9F, 0x01, 0x6B, 0x03,
                0x7B, 0x7F, 0x48, 0x19, 0xE7, 0x07, 0x44, 0x69, 0x4E, 0xC1,
                0xF7, 0x53, 0xCC, 0x80, 0xB6, 0x3B, 0xB8, 0x8D, 0x63, 0x02,
                0x8D, 0x88, 0x59, 0x91, 0x76, 0x58, 0x7C, 0xCA, 0x02, 0x9F,
                0x99, 0x1C, 0x32, 0xCD, 0x42, 0xC6, 0x64, 0x63, 0x2E, 0x70,
                0xBF, 0xC2, 0x35, 0x5E, 0xBF, 0x3F, 0x49, 0xB5, 0x02, 0x03,
                0x01, 0x00, 0x01, 0x02, 0x82, 0x01, 0x01, 0x00, 0x96, 0xF9,
                0xBE, 0x0C, 0xBA, 0xD8, 0x82, 0x77, 0x39, 0x4B, 0xB4, 0x45,
                0x18, 0xD0, 0x18, 0x53, 0x02, 0x59, 0x9D, 0xFB, 0xA2, 0x00,
                0xDC, 0x9A, 0xBA, 0x28, 0x91, 0x1E, 0x66, 0x90, 0x59, 0x73,
                0x15, 0xFB, 0xFF, 0x1F, 0x63, 0xB8, 0x8D, 0x89, 0xFE, 0x83,
                0xA7, 0x4D, 0xD8, 0xFF, 0x85, 0x27, 0x25, 0x21, 0x40, 0x70,
                0x6D, 0x2A, 0x46, 0x42, 0x9C, 0x93, 0xFD, 0xDD, 0xB3, 0x37,
                0xF1, 0x07, 0xC8, 0x34, 0xAD, 0xF4, 0x50, 0x2B, 0xF9, 0x89,
                0x6C, 0x9E, 0x9A, 0x6E, 0x6C, 0x27, 0x51, 0x88, 0xCC, 0xEA,
                0x71, 0x01, 0xEA, 0x1A, 0xDB, 0x6D, 0xCB, 0xBB, 0xF6, 0x59,
                0xFB, 0x48, 0x37, 0x51, 0xD5, 0xDB, 0x96, 0x20, 0xE3, 0x2E,
                0x87, 0x71, 0x49, 0x76, 0x10, 0x44, 0x60, 0xF6, 0xA6, 0xDF,
                0xAA, 0xEE, 0x36, 0xDD, 0x72, 0x94, 0xFA, 0x53, 0xB6, 0x69,
                0x39, 0xB4, 0x2D, 0x55, 0x5E, 0xBB, 0xBD, 0xD2, 0x76, 0x63,
                0x0D, 0x50, 0x64, 0xDD, 0x41, 0xBD, 0x00, 0xB8, 0xC1, 0x79,
                0xD2, 0xE3, 0x4A, 0x81, 0xE8, 0x38, 0xAE, 0xFD, 0xBA, 0x83,
                0x7E, 0x53, 0xF8, 0xEF, 0xB5, 0x61, 0x00, 0x2E, 0x3F, 0xDE,
                0x2C, 0x3C, 0x8A, 0x3D, 0x72, 0x49, 0xE0, 0x8E, 0x7E, 0x60,
                0x65, 0x54, 0xAC, 0x12, 0x93, 0x3E, 0x5F, 0xA5, 0xA1, 0x7F,
                0xB5, 0x57, 0xB8, 0x6A, 0xFF, 0x50, 0xBF, 0xAA, 0x0A, 0xBA,
                0xFE, 0x66, 0xF8, 0x75, 0x16, 0x37, 0xDA, 0x00, 0x05, 0xBE,
                0xBE, 0x9B, 0x0E, 0x7B, 0x29, 0x78, 0x9F, 0x1F, 0x00, 0x7E,
                0xA8, 0xB0, 0xEF, 0x3F, 0x37, 0x63, 0xD3, 0x6E, 0x2F, 0x27,
                0x6B, 0x75, 0x0F, 0x92, 0x5B, 0x6F, 0xB5, 0xB2, 0xB4, 0x21,
                0x75, 0x47, 0x48, 0x71, 0x95, 0x4F, 0x29, 0xCA, 0x1E, 0x69,
                0x4E, 0xB8, 0xCD, 0x4A, 0x91, 0x5B, 0x29, 0x35, 0xBF, 0x9F,
                0x18, 0xA6, 0xD7, 0x09, 0x02, 0x81, 0x81, 0x00, 0xEA, 0x28,
                0xB1, 0x76, 0x30, 0xAD, 0xAF, 0x89, 0x4A, 0xF4, 0x66, 0x87,
                0x21, 0x06, 0x83, 0xAB, 0xF4, 0x3A, 0xDB, 0x18, 0xD3, 0xBC,
                0x32, 0x0C, 0x14, 0x3A, 0xB2, 0x64, 0x49, 0xAB, 0xEC, 0xEE,
                0x23, 0xB9, 0x9F, 0x15, 0xF6, 0xCC, 0xC0, 0x93, 0xC6, 0x9B,
                0xB1, 0x0F, 0xDB, 0xB1, 0x90, 0xFA, 0xBD, 0x53, 0x9D, 0x4B,
                0x39, 0x9E, 0x54, 0x36, 0x0A, 0xF9, 0x6A, 0xDB, 0xBA, 0x0B,
                0xA8, 0x75, 0x26, 0xAB, 0xFA, 0x8B, 0xB6, 0x1D, 0xC4, 0x90,
                0xFF, 0x9E, 0x5B, 0xC0, 0xFA, 0xD1, 0x4A, 0xB5, 0xF1, 0x02,
                0x2D, 0x3C, 0xF2, 0xF3, 0x8C, 0xBF, 0x29, 0xC0, 0x94, 0x2E,
                0x90, 0x20, 0x10, 0x42, 0x83, 0x9D, 0x94, 0xAD, 0x13, 0x14,
                0xC7, 0x6B, 0x13, 0x49, 0x68, 0x78, 0xDD, 0x77, 0xCA, 0xDA,
                0x10, 0xC9, 0xA0, 0x71, 0x5D, 0x52, 0xB0, 0x5A, 0x81, 0x91,
                0x1E, 0x89, 0x80, 0xD8, 0x1F, 0x13, 0x02, 0x81, 0x81, 0x00,
                0xF0, 0x4F, 0xC6, 0x91, 0x23, 0x7B, 0x43, 0x0E, 0x59, 0x94,
                0xDE, 0xF7, 0xE2, 0xA3, 0xA9, 0x8F, 0x80, 0x45, 0x95, 0xF0,
                0xC1, 0xD5, 0x98, 0x92, 0x6F, 0x76, 0x5F, 0x78, 0x59, 0xBF,
                0xFA, 0xC2, 0x86, 0xC3, 0x57, 0xA1, 0x84, 0x8C, 0x2C, 0x28,
                0x21, 0x21, 0xA9, 0x16, 0x89, 0x1F, 0xF4, 0x08, 0x87, 0x79,
                0x4E, 0xD2, 0x3B, 0x73, 0x43, 0xF0, 0x0A, 0x1D, 0xA7, 0x49,
                0x0D, 0x96, 0xE8, 0x18, 0xB1, 0x87, 0xB5, 0x32, 0x7E, 0x63,
                0x05, 0xDA, 0x70, 0x1D, 0x42, 0x90, 0xD7, 0xE1, 0xF6, 0x72,
                0x69, 0xB2, 0xEB, 0x2C, 0x3F, 0x74, 0xD7, 0xA8, 0xD5, 0x38,
                0x77, 0xD2, 0xE2, 0x0E, 0x94, 0x68, 0xAE, 0x0A, 0xA4, 0xB9,
                0xFF, 0x55, 0x96, 0xE1, 0x76, 0x61, 0x28, 0x4E, 0xD6, 0x6B,
                0x34, 0x04, 0x30, 0x07, 0xD0, 0x3A, 0x00, 0x98, 0x97, 0xCE,
                0x3A, 0xBA, 0x93, 0x86, 0x22, 0x66, 0x65, 0x17, 0x02, 0x81,
                0x81, 0x00, 0xCA, 0x27, 0xFF, 0xAD, 0xCE, 0x30, 0xE5, 0x0F,
                0x5E, 0xCA, 0xC9, 0x89, 0x78, 0x15, 0xAB, 0xAF, 0xD4, 0xD6,
                0xCB, 0x39, 0x0F, 0xF3, 0xB6, 0x31, 0x7F, 0x75, 0x7D, 0x75,
                0xDF, 0xB4, 0xB2, 0x84, 0x96, 0x0B, 0x37, 0x31, 0x3B, 0x35,
                0x62, 0x3D, 0x32, 0x86, 0x4F, 0xC3, 0x25, 0x24, 0x93, 0xCA,
                0x25, 0x91, 0xFE, 0x86, 0x67, 0x64, 0x2D, 0xC7, 0xCA, 0x89,
                0xB2, 0x9B, 0xA8, 0x6F, 0x50, 0x2C, 0x74, 0x0A, 0x9D, 0xEF,
                0xE8, 0x76, 0xA2, 0xB1, 0x9C, 0x3E, 0x17, 0x70, 0xF0, 0x19,
                0xA8, 0xAA, 0x93, 0x3C, 0x11, 0xDA, 0x40, 0xD5, 0xCB, 0x79,
                0x6E, 0x8E, 0x78, 0x60, 0x0A, 0xC5, 0xE3, 0xC3, 0xC8, 0xE5,
                0x4E, 0xEA, 0x6D, 0x42, 0xCF, 0x37, 0xBE, 0x1A, 0xEE, 0x3B,
                0x0A, 0xD8, 0xD5, 0x24, 0x96, 0xC1, 0xBB, 0xE6, 0xA3, 0x6F,
                0x34, 0x19, 0xAF, 0x2A, 0x9E, 0x76, 0x8F, 0xEA, 0x06, 0x49,
                0x02, 0x81, 0x80, 0x6E, 0x2E, 0x25, 0x7C, 0xA6, 0x27, 0xFD,
                0xB6, 0xB6, 0x9B, 0xEB, 0x1E, 0xFC, 0x6A, 0xCD, 0x73, 0x5D,
                0xFC, 0x89, 0xA2, 0xB9, 0x3C, 0x95, 0x97, 0x8E, 0x43, 0x57,
                0xC2, 0x76, 0x63, 0xEF, 0x35, 0x01, 0x54, 0xCE, 0xF8, 0xDF,
                0x2C, 0xE5, 0x92, 0x00, 0x9E, 0xCE, 0x47, 0xE6, 0xD7, 0x1F,
                0xAC, 0x49, 0x70, 0xF5, 0x12, 0xAE, 0xEF, 0x4A, 0x56, 0xE4,
                0x4C, 0x74, 0x46, 0xAA, 0x54, 0x66, 0x55, 0xEC, 0x0F, 0xAC,
                0xA4, 0x5A, 0x0E, 0x4C, 0xC0, 0xBA, 0x66, 0xAF, 0xFE, 0x78,
                0xFC, 0xC1, 0x61, 0xF3, 0xD4, 0x74, 0xBE, 0xF4, 0xD9, 0x3D,
                0x87, 0xCB, 0x3A, 0xF8, 0xB5, 0x57, 0xB0, 0x17, 0x9B, 0x67,
                0x30, 0xBA, 0x16, 0x0D, 0x5B, 0xD0, 0xB1, 0xCE, 0xF4, 0xFC,
                0xE6, 0x28, 0xA9, 0x3E, 0x50, 0x2D, 0x35, 0x67, 0xE3, 0x30,
                0x22, 0xC6, 0x77, 0x67, 0xB5, 0xE3, 0xAD, 0xBC, 0x57, 0xF6,
                0x41, 0x02, 0x81, 0x80, 0x29, 0x39, 0xBA, 0x07, 0x6B, 0xF0,
                0x3A, 0x7B, 0x94, 0x26, 0x63, 0x59, 0xF2, 0x92, 0x6F, 0x32,
                0x2D, 0x2E, 0xF7, 0xC9, 0xA3, 0x80, 0x71, 0x91, 0xCD, 0x7E,
                0x9F, 0xE3, 0x1A, 0xAE, 0x0F, 0x2D, 0x67, 0xA6, 0x79, 0x4E,
                0x09, 0xC4, 0x15, 0x71, 0x3D, 0x45, 0x93, 0x1E, 0xD4, 0xAA,
                0x1D, 0xCF, 0x9A, 0xDA, 0x16, 0xAA, 0xEC, 0x1A, 0xAC, 0x4F,
                0x8D, 0x63, 0xFE, 0xDA, 0x3A, 0x05, 0x5B, 0x9D, 0x2D, 0xC1,
                0xDA, 0xAD, 0xF8, 0xDA, 0xDA, 0x3A, 0x7B, 0x9F, 0x5B, 0x4F,
                0x89, 0xB8, 0xA9, 0x7D, 0xC3, 0xC8, 0x59, 0x4F, 0xCC, 0x77,
                0x55, 0xAD, 0x41, 0x4D, 0x1D, 0x7B, 0x5A, 0xDF, 0xD7, 0xFB,
                0x4D, 0x7B, 0x7D, 0x98, 0x42, 0x8F, 0xD6, 0xEE, 0x56, 0x8C,
                0xC2, 0x8B, 0xDD, 0xE0, 0x67, 0x72, 0x47, 0xFA, 0x0B, 0x03,
                0xDA, 0x6F, 0x59, 0x59, 0x7C, 0xA5, 0x88, 0x4E, 0x84, 0x01,
                0xC3, 0x07 };


        static void Main (string [] args) {
            Console.Write ("SERVIDOR\n\n");

            Conexion servidor = new Conexion ();
	        Conexion conexion = new Conexion ();
            try {
                servidor.AseguraServidor (clave_privada);
                servidor.IniciaServidor (27015);
                conexion = servidor.AceptaCliente ();
                //
                conexion.RecibePaquete ();
    //int r;
    //std::cin >> r;
                int numero = conexion.ExtraeInteger ();
                Console.Write (numero + "\n");
                numero = conexion.ExtraeInteger ();
                Console.Write (numero + "\n");

                string cadena = conexion.ExtraeString ();
                Console.Write (cadena + "\n");

                numero = conexion.ExtraeInteger ();
                Console.Write (numero + "\n");
                numero = conexion.ExtraeInteger ();
                Console.Write (numero + "\n");
                    
                cadena = conexion.ExtraeString ();
                Console.Write (cadena + "\n");

                string s;
        
                s = conexion.RecibeString ();
                Console.Write ("1) " + s + "\n"); 

                s = "primera respuesta";
                conexion.EnviaString (s);

                s = conexion.RecibeString ();
                Console.Write ("2) " + s + "\n"); 

                s = "segunda respuesta";
                conexion.EnviaString (s);

                s = conexion.RecibeString ();
                Console.Write ("3) " + s + "\n"); 

                s = "tercera respuesta";
                conexion.EnviaString (s);

            } catch (ConexionInterrumpida) {
    		    Console.WriteLine ("Conexión interrumpida. ");
            } catch (ErrorConexion error) {
    		    Console.WriteLine ("ErrorConexion: ");
	    	    Console.WriteLine (error.Message);
            } catch (Exception error) {
    		    Console.WriteLine ("Excepción: ");
	    	    Console.WriteLine (error.Message);
                Console.WriteLine (error.StackTrace);
            } finally { 
                conexion.Termina ();
                servidor.Termina ();
            }

            Console.Write ("Vale.\n");
            Console.ReadLine ();
        }


    }


}
